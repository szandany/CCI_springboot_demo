name: CI

on: 
  push:
    branches:
      - main
      - develop
  # pull_request:
  #   branches:
  #     - main
  #     - develop
    
env:
  total-runners: 5
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: mrkostin/maven:3.6.0-alpine-git-curl-jq
    services:
      oracle_dev:
        image: oracleinanutshell/oracle-xe-11g
        ports:
            - 49161:1521
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: /root/.m2
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-build-
      - name: Running Liquibase Quality Checks
        run: |
          mvn process-resources liquibase:checks.run
      - name: Build with Maven
        run: |
          mvn clean package -Dspring.datasource.url=${{ secrets.LIQUIBASE_COMMAND_URL }} -Dspring.datasource.username=${{ secrets.LIQUIBASE_COMMAND_USERNAME }} -Dspring.datasource.password=${{ secrets.LIQUIBASE_COMMAND_PASSWORD }} -Dspring.liquibase.change-log=classpath:db/changelog/changelog_version-3.2.oracle.sql -Dserver.port=8086 -Duser.timezone=CST
      - uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/
  
  uat-parallel-tests:
    name: UAT
    runs-on: ubuntu-latest
    needs:
      - runner-indexes
    container:
      image: mrkostin/maven:3.6.0-alpine-git-curl-jq
    strategy:
      fail-fast: true
      matrix:
        runner-index: ${{ fromjson(needs.runner-indexes.outputs.json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.0.2
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: /root/.m2
          key: ${{ runner.os }}-uat-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-uat-
      - run: |
          # Download the latest tests results artifact
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/szandany/CCI_springboot_demo/actions/artifacts | jq -r '.artifacts | sort_by(.created_at) | .[] | select(.name == "Test Results") | .id' > artifacts_list.txt

          LATEST_ARTIFACT_NUMBER=$(cut -d: -f 2 artifacts_list.txt | sort -n | tail -n 1)

          curl \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -L -o my_artifact.zip \
              https://api.github.com/repos/szandany/CCI_springboot_demo/actions/artifacts/"${LATEST_ARTIFACT_NUMBER}"/zip

          mkdir test_results
          unzip my_artifact.zip -d test_results
      - uses: chaosaffe/split-tests@v1-alpha.1
        id: split-tests
        name: Split tests
        with:
          glob: src/test/**/**/**.java
          split-total: ${{ env.total-runners }}
          split-index: ${{ matrix.runner-index }}
          junit-path: test_results/*xml
          line-count: true
      - run: 'echo "This runner will execute the following tests: ${{ steps.split-tests.outputs.test-suite }}"'
      - run: |
          LIST="${{ steps.split-tests.outputs.test-suite }}"
          for file in $LIST
          do
              mvn -Dtest=$(basename $file | sed -e "s/.java/,/" | tr -d '\r\n') -e test 
          done
      - uses: actions/upload-artifact@v3
        with:
          name: Test Results
          path: ./target/surefire-reports

  build-and-publish-docker-image:
    runs-on: ubuntu-18.04
    needs: [build, uat-parallel-tests]
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: jar-artifact
        path: target/
    - name: Docker build
      run: |
        docker build . -t ghcr.io/szandany/${{ github.repository }}:${{ github.run_number }}
    - name: Log in to the GH Container Registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker push
      run: |
        docker push ghcr.io/szandany/${{ github.repository }}:${{ github.run_number }}
  
  runner-indexes:
    runs-on: ubuntu-latest
    # needs:
    #   - build
    name: Generate runner indexes
    outputs:
      json: ${{ steps.generate-index-list.outputs.json }}
    steps:
      - id: generate-index-list
        run: |
          MAX_INDEX=$((${{ env.total-runners }}-1))
          INDEX_LIST=$(seq 0 ${MAX_INDEX})
          INDEX_JSON=$(jq --null-input --compact-output '. |= [inputs]' <<< ${INDEX_LIST})
          echo "json=${INDEX_JSON}" >> $GITHUB_OUTPUT


#       - name: Setup Docker buildx
#         uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf



      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       # Build and push Docker image with Buildx (don't push on PR)
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
#         with:
#           context: .
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

