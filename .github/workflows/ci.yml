name: CI

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
#   schedule:
#     - cron: '16 3 * * *'
  push:
    branches:
    - main
    - develop
    # Publish semver tags as releases.
#     tags: [ 'v*.*.*' ]
#   pull_request:
#     branches:
#     - main
#     - develop
    
env:
  total-runners: 5
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    services:
      oracle_dev:
        # Docker Hub image
        image: oracleinanutshell/oracle-xe-11g
        ports:
            - 49161:1521
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: package artifact
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Running Liquibase Quality Checks
        run: |
          mvn process-resources liquibase:checks.run
      - name: Build with Maven
        run: |
          mvn clean package -Dspring.datasource.url=${{ secrets.LIQUIBASE_COMMAND_URL }} -Dspring.datasource.username=${{ secrets.LIQUIBASE_COMMAND_USERNAME }} -Dspring.datasource.password=${{ secrets.LIQUIBASE_COMMAND_PASSWORD }} -Dspring.liquibase.change-log=classpath:db/changelog/changelog_version-3.2.oracle.sql -Dserver.port=8086 -Duser.timezone=CST
      
      - uses: actions/upload-artifact@master
        with:
          name: my-artifact
          path: target/

  runner-indexes:
    runs-on: ubuntu-latest
    name: Generate runner indexes
    outputs:
      json: ${{ steps.generate-index-list.outputs.json }}
    steps:
      - id: generate-index-list
        run: |
          MAX_INDEX=$((${{ env.total-runners }}-1))
          INDEX_LIST=$(seq 0 ${MAX_INDEX})
          INDEX_JSON=$(jq --null-input --compact-output '. |= [inputs]' <<< ${INDEX_LIST})
          echo "json=${INDEX_JSON}" >> $GITHUB_OUTPUT
  
  run-parallel-tests:
    name: UAT
    runs-on: ubuntu-latest
  #  runs-on: "Runner #${{ matrix.runner-index }}: Run test suite in parallel"
    needs:
      - runner-indexes
    container:
      image: maven:3.8-ibmjava
    strategy:
      fail-fast: true
      matrix:
        runner-index: ${{ fromjson(needs.runner-indexes.outputs.json) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.0.2
      - uses: chaosaffe/split-tests@v1-alpha.1
        id: split-tests
        name: Split tests
        with:
          glob: src/test/**/**/**.java
          split-total: ${{ env.total-runners }}
          split-index: ${{ matrix.runner-index }}
          junit-path: .*/target/surefire-reports/.*xml
          line-count: true
      - run: 'echo "This runner will execute the following tests: ${{ steps.split-tests.outputs.test-suite }}"'
      - run: |
          LIST="${{ steps.split-tests.outputs.test-suite }}"
          for file in $LIST
          do
              mvn -Dtest=$(basename $file | sed -e "s/.java/,/" | tr -d '\r\n') -e test 
          done
      - name: Archive Test Results
        uses: actions/upload-artifact@v1
        with:
          name: tests_results
          path: |
            target/surefire-reports
      # - name: Run tests in parrallel
      #   run: |
      #     echo "${{ matrix.ci_node_total }}, ${{ matrix.ci_node_index }}"
      #     mvn -Dtest=$(for file in $( find "src/test/" -type f -name '*.java' ); do basename $file | sed -e "s/.java/,/"; done | tr -d '\r\n') -e test
      
      
      
      
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
#       - name: Install cosign
#         if: github.event_name != 'pull_request'
#         uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
#         with:
#           cosign-release: 'v1.11.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
#       - name: Setup Docker buildx
#         uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
#       - name: Log into registry ${{ env.REGISTRY }}
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       # Build and push Docker image with Buildx (don't push on PR)
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
#         with:
#           context: .
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
#       - name: Sign the published Docker image
#         if: ${{ github.event_name != 'pull_request' }}
#         env:
#           COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
#         run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
