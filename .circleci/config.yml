# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  github-super-linter: circleci/github-super-linter@1.0.1
  shellcheck: circleci/shellcheck@3.1.1

jobs:
  inspect_db_code:
    docker:
      - image: liquibase/liquibase:latest

    steps:
      - checkout
      - run:
          name: "Run Liquibase version"
          command: "liquibase --version"

      - run: 
          name: "Run Liquibase Quality Checks"
          command: "liquibase --changeLogFile=src/main/resources/db/changelog/changelog_version-3.2.oracle.sql checks run"

  
  build:
    # Primary container image where all commands run
    docker:
      - image: cimg/openjdk:18.0.2
      
      # Service container image
      - image: oracleinanutshell/oracle-xe-11g

    steps:
    - checkout
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
          - v1-dependencies- # fallback in case previous cache key is not found
    - run:
        name: "Build app changes"
        command: |
          mvn clean package -Dspring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521/xe -Dspring.datasource.username=system -Dspring.datasource.password=oracle -Dspring.liquibase.change-log=classpath:db/changelog/changelog_version-3.2.oracle.sql -Dserver.port=8086 -Duser.timezone=CST
          cp ./target/SalesManager-*-SNAPSHOT.jar /tmp
    - save_cache:
          paths:
             - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

    - store_artifacts:
        path: /tmp
        destination: artifact-file

    - persist_to_workspace:
         root: ./
         paths:
           - target/
  acceptance_testing_1:
    docker:
      - image: cimg/openjdk:18.0.2
    steps:
      - checkout
      - run: java --version
  acceptance_testing_2:
    docker:
      - image: cimg/openjdk:18.0.2
    steps:
      - checkout
      - run: java --version
  sys_integration_testing_1:
    docker:
      - image: cimg/openjdk:18.0.2
    steps:
      - checkout
      - run: java --version
  sys_integration_testing_2:
    docker:
      - image: cimg/openjdk:18.0.2
    steps:
      - checkout
      - run: java --version

  unit_testing:
    parallelism: 2 # parallel containers to split the tests among
    resource_class: large
    # Primary container image where all commands run
    docker:
      - image: cimg/openjdk:18.0.2
    steps:
    - checkout
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "pom.xml" }} # appends cache key with a hash of pom.xml file
          - v1-dependencies- # fallback in case previous cache key is not found
    - attach_workspace:
          at: ./target
    # - run:
    #     name: "Run tests"
    #     command: "mvn -Dspring.datasource.url=$TESTDB_URL -Dspring.datasource.username=$TESTDB_USERNAME -Dspring.datasource.password=$TESTDB_PASSWORD -Dtest=JUnit5ExampleTest2,JUnit5ExampleTest1 -Dserver.port=8086 -Duser.timezone=CST test"
    - run: |
        mvn -Dspring.datasource.url=$TESTDB_URL -Dspring.datasource.username=$TESTDB_USERNAME -Dspring.datasource.password=$TESTDB_PASSWORD -Dserver.port=8086 -Duser.timezone=CST \
        -Dtest=$(for file in $(circleci tests glob "src/test/**/**/**.java" \
        | circleci tests split --split-by=timings); \
        do basename $file \
        | sed -e "s/.java/,/"; \
        done | tr -d '\r\n') \
        -e test

    - run:
        name: Save test results
        command: |
          mkdir -p ~/test-results/junit/
          find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
        when: always

    - store_test_results:
        path: ~/test-results
  
  deploy:
    resource_class: large
    docker:
      - image: idealista/java-debian-ansible:3.2.0-debian9
    steps:
    - checkout
    - attach_workspace:
          at: ./
    - run: |
        cd ansible
        ansible-playbook playbooks/deploy_artifacts.yml
        lsof -i :8086

workflows:
  ci_workflow:
    jobs:
      - shellcheck/check:
          dir: ./src
          exclude: SC2148
      - inspect_db_code
      - github-super-linter/lint:
          # context: Super-Linter-Options
          scan-dir: test/java/net/codejava
          version: slim-latest
      - build:
          requires:
            - inspect_db_code
            - shellcheck/check
            - github-super-linter/lint
      - unit_testing:
          requires:
            - build
      - acceptance_testing_1:
          requires:
            - build
      - acceptance_testing_2:
          requires:
            - build
      - sys_integration_testing_1:
          requires:
            - build
      - sys_integration_testing_2:
          requires:
            - build
      - deploy:
          requires:
            - unit_testing
            - acceptance_testing_1
            - acceptance_testing_2
            - sys_integration_testing_1
            - sys_integration_testing_2
